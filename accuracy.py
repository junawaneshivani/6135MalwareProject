
import torch
import torch.nn as nn
from dnn import DNN1, DNN2, DNN3, DNN4, DNN5
from train_dnn import generate_train_test_dataset
from train_classical import generate_train_test_data
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from torch.utils.data import DataLoader
from prettytable import PrettyTable
from joblib import load



if __name__ == "__main__":

    traindataset, testdataset = generate_train_test_dataset("data/kddtrain.csv", "data/kddtest.csv")
    test_loader = DataLoader(testdataset, batch_size=len(testdataset), 
                            shuffle=False, num_workers=4)

    # DNN
    model_paths = ["models/model_1_epoch_11", "models/model_2_epoch_8", 
                    "models/model_3_epoch_9", "models/model_4_epoch_14",
                    "models/model_5_epoch_1"]
    models = ["", DNN1, DNN2, DNN3, DNN4, DNN5]
    table = PrettyTable(["Model", "Accuracy", "Precision", "Recall", "F1-score"])
    criterion = nn.BCELoss()
    for model_path in model_paths:
        model_index = model_path.split("/")[-1].split("_")[1]
        model = models[int(model_index)]()
        model.load_state_dict(torch.load(model_path))
        model.eval()
        
        iterator = iter(test_loader)
        data, target = next(iterator)
        data, target = data.float(), target.float()
        output = model(data)                # forward pass
        loss = criterion(output, target)    # compute loss
        
        threshold = torch.tensor([0.7])
        results = (output>threshold).float()*1
        
        accuracy = float("{0:.3f}".format(accuracy_score(target.numpy(), results.numpy())))
        precision = float("{0:.3f}".format(precision_score(target.numpy(), results.numpy() , average="binary")))
        recall = float("{0:.3f}".format(recall_score(target.numpy(), results.numpy() , average="binary")))
        f1 = float("{0:.3f}".format(f1_score(target.numpy(), results.numpy(), average="binary")))
        table.add_row(["DNN"+model_index, accuracy, precision, recall, f1])

    # Classical
    X_train, y_train, X_test, y_test = generate_train_test_data("data/kddtrain.csv", "data/kddtest.csv")
    models = ["models/AdaBoost.joblib", "models/DecisionTree.joblib",
              "models/KNearestNeighbour.joblib", "models/LinearRegression.joblib", 
              "models/NaiveBayes.joblib", "models/RandomForest.joblib"]

    for model_path in models:
        model = load(model_path)
        y_pred = model.predict(X_test)
        y_pred = (y_pred>0.7)*1

        accuracy = float("{0:.3f}".format(accuracy_score(y_test, y_pred)))
        precision = float("{0:.3f}".format(precision_score(y_test, y_pred, average="binary")))
        recall = float("{0:.3f}".format(recall_score(y_test, y_pred, average="binary")))
        f1 = float("{0:.3f}".format(f1_score(y_test, y_pred, average="binary")))
        table.add_row([model_path.split("/")[1].split(".")[0], accuracy, precision, recall, f1]) 


    print(table)