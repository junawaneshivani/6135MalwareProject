import torch
import torch.nn as nn


class DNN1(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(in_features=41, out_features=1024),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=1024, out_features=1),
            nn.Sigmoid()
        )

    def forward(self, X):
        return self.model(X)

class DNN2(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(in_features=41, out_features=1024),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=1024, out_features=768),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=768, out_features=1),
            nn.Sigmoid()
        )

    def forward(self, X):
        return self.model(X)

class DNN3(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(in_features=41, out_features=1024),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=1024, out_features=768),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=768, out_features=512),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=512, out_features=1),
            nn.Sigmoid()
        )

    def forward(self, X):
        return self.model(X)

class DNN4(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(in_features=41, out_features=1024),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=1024, out_features=768),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=768, out_features=512),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=512, out_features=256),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=256, out_features=1),
            nn.Sigmoid()
        )

    def forward(self, X):
        return self.model(X)

class DNN5(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(in_features=41, out_features=1024),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=1024, out_features=768),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=768, out_features=512),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=512, out_features=256),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=256, out_features=128),
            nn.ReLU(),
            nn.Dropout(p=0.01),
            nn.Linear(in_features=128, out_features=1),
            nn.Sigmoid()
        )

    def forward(self, X):
        return self.model(X)

if  __name__=="__main__":
    pass